@page "/project/{projectId}"
@using Olve.Grids.Adjacencies
@using Olve.Grids.Brushes
@using Olve.Grids.Grids
@using Olve.Grids.Weights
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Processing
@inject LoadProjectOperation LoadProjectOperation
@inject LoggingService Logger
@inject NavigationManager NavigationManager

<div class="@TW(Flex, FlexCol, WFull, HFull)">
    <div
        class="@TW(WFull, Bg(Colors.Active.Panels.More), Flex, FlexRow, JustifyBetween, ItemsCenter)">
        <div>
            <Button OnClick="HandleBack">
                <Icon IconDescriptor="IconDescriptor.ChevronLeft"/>
            </Button>
        </div>

        <h1 class="@TW(Text(Colors.Active.Text.Ordinary))">
            @(Project.Name.Value)
        </h1>

        <div>
        </div>

    </div>

    <div class="@TW(FlexGrow, WFull, OverflowYHidden, P(4))">
        <div class="@TW(Grid, GridCols($"repeat({GridConfiguration.Columns},auto)"), Gap(2))">
            @foreach (var tileInformation in GetTileInformation())
            {
                <ActiveTile TileInformation="@tileInformation"/>
            }
        </div>
    </div>
</div>

@code {
    private const string ProjectIdParameterName = "projectId";

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> Garbage { get; set; } = new();

    private Id<Project> ProjectId { get; set; }
    private Project Project { get; set; } = null!;

    private Image TileSheetImage { get; set; } = null!;
    private GridConfiguration GridConfiguration { get; set; }

    private IBrushLookup BrushLookup { get; set; } = null!;
    private IAdjacencyLookup AdjacencyLookup { get; set; } = null!;
    private IWeightLookup WeightLookup { get; set; } = null!;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        foreach (var parameter in parameters)
        {
            switch (parameter.Name)
            {
                case ProjectIdParameterName:
                    ProjectId = Id<Project>.Parse((string)parameter.Value);
                    break;
            }
        }

        await base.SetParametersAsync(parameters);
    }

    protected override async Task OnParametersSetAsync()
    {
        LoadProjectOperation.Request request = new(ProjectId);
        var result = await LoadProjectOperation.ExecuteAsync(request);

        if (result.TryPickProblems(out var problems, out var response))
        {
            Logger.Show(problems);
            HandleBack();
            return;
        }

        Project = response.Project;

        var gridConfigurationResult = GetGridConfiguration(Project);
        if (gridConfigurationResult.TryPickProblems(out problems, out var gridConfiguration))
        {
            Logger.Show(problems);
            HandleBack();
            return;
        }

        GridConfiguration = gridConfiguration;
        TileSheetImage = Image.Load(response.Project.TileSheetImage.Content);

        BrushLookup = response.Project.TileAtlasBuilder.Configuration.BrushLookup ?? new BrushLookup();
        Project.TileAtlasBuilder.WithBrushLookup(BrushLookup);

        AdjacencyLookup = response.Project.TileAtlasBuilder.Configuration.AdjacencyLookup ?? new AdjacencyLookup();
        Project.TileAtlasBuilder.WithAdjacencyLookup(AdjacencyLookup);

        WeightLookup = response.Project.TileAtlasBuilder.Configuration.WeightLookup ?? new WeightLookup();
        Project.TileAtlasBuilder.WithWeightLookup(WeightLookup);
    }

    private void HandleBack()
    {
        NavigationManager.NavigateTo("/");
    }

    private Result<GridConfiguration> GetGridConfiguration(Project project)
    {
        var config = project.TileAtlasBuilder.Configuration;
        var columns = config.Columns;

        if (!columns.HasValue)
        {
            if (!config.ImageSize.HasValue || !config.TileSize.HasValue)
            {
                return Result<GridConfiguration>.Failure(new ResultProblem("No columns defined and image size or tile size not defined")
                {
                    Source = nameof(ProjectDashboard),
                });
            }

            columns = config.ImageSize.Value.Width / config.TileSize.Value.Width;
        }

        var rows = config.Rows;

        if (!rows.HasValue)
        {
            if (!config.ImageSize.HasValue || !config.TileSize.HasValue)
            {
                return Result<GridConfiguration>.Failure(new ResultProblem("No rows defined and image size or tile size not defined")
                {
                    Source = nameof(ProjectDashboard),
                });
            }

            rows = config.ImageSize.Value.Height / config.TileSize.Value.Height;
        }

        if (!config.TileSize.HasValue)
        {
            return Result<GridConfiguration>.Failure(new ResultProblem("No rows defined")
            {
                Source = nameof(ProjectDashboard),
            });
        }

        return new GridConfiguration(config.TileSize.Value, rows.Value, columns.Value);
    }

    private IEnumerable<TileInformation> GetTileInformation()
    {
        var tileIndices = GridConfiguration.GetTileIndices();

        foreach (var tileIndex in tileIndices)
        {
            var (row, col) = GridConfiguration.GetRowAndColumn(tileIndex);

            var image = TileSheetImage.Clone(x => x.Crop(new Rectangle(
                col * GridConfiguration.TileSize.Width,
                row * GridConfiguration.TileSize.Height,
                GridConfiguration.TileSize.Width,
                GridConfiguration.TileSize.Height)));

            var weight = WeightLookup.GetWeight(tileIndex);
            var cornerBrushes = BrushLookup
                .GetBrushes(tileIndex)
                .GetT0OrDefault(new CornerBrushes());
            var neighbors = AdjacencyLookup.GetNeighbors(tileIndex);

            yield return new TileInformation(tileIndex, image, weight, cornerBrushes, neighbors, false);
        }
    }


}