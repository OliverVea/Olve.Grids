@using Olve.Grids.Brushes
@using Olve.Grids.Primitives

<Tile Image="@TileInformation.Image"
      Classes="@TW(Relative, WFull, ShadowXl, border, TransitionTransform, Transform, Hover(Scale(125), Z(10)))">

    @foreach (var (corner, top, left) in GetCorners())
    {
        var brushOrAny = CornerBrushes[corner];

        @if (brushOrAny.TryPickT0(out var brushId, out _))
        {
            <Dot
                Class="@TW(Absolute, Top(pct(top)), Left(pct(left)), Hover(Scale(150)), Z(15))"
                Color="@GetBrushColorString(brushId)"
                Radius="15%"/>
        }
        else
        {
            <Dot
                Class="@TW(Absolute, Top(pct(top)), Left(pct(left)), Hover(Scale(150)), Z(15), border)"
                Radius="15%"/>
        }
    }
</Tile>


@code {


    private static readonly HsvNormal HsvNormal = new(
        new NormalParameters(0.6f, 0.25f),
        new NormalParameters(0.5f, 0.05f));

    private ColorString GetBrushColorString(BrushId brushId) => CachedColorHelper.GetColorStringFromInteger(brushId.Id.GetHashCode(), HsvNormal);

    [Parameter] [EditorRequired] public required TileInformation TileInformation { get; set; }

    private CornerBrushes CornerBrushes => TileInformation.CornerBrushes;

    private const float DotRadius = 15f;
    private const float Small = 15f;
    private const float Large = 85f - DotRadius;

    private IEnumerable<(Corner, float Top, float Left)> GetCorners()
    {
        yield return (Corner.UpperLeft, Small, Small);
        yield return (Corner.UpperRight, Small, Large);
        yield return (Corner.LowerLeft, Large, Small);
        yield return (Corner.LowerRight, Large, Large);
    }

}



