@using Olve.Grids.Grids
@using Olve.Grids.Primitives
@inject ListBrushesOperation ListBrushesOperation
@inject LoggingService LoggingService
@inject ModalService ModalService
@inject ContextMenuService ContextMenuService
@inject SetBrushForTileCornerOperation SetBrushForTileCornerOperation
@inject CreateNewBrushOperation CreateNewBrushOperation

@{
    var firstText = $"Select brush for tile {TileIndex.Index}";
}

<ContextMenuText Text="@firstText"/>
<ContextMenuBrushColor ProjectBrushOrAny="@ProjectBrushOrAny">
    @if (ProjectBrushOrAny.TryPickT0(out var currentBrush, out _))
    {
        <Icon IconDescriptor="IconDescriptor.Edit"
              OnClick="@(e => HandleEditBrush(e, currentBrush))"
              StopPropagation="@true"/>
    }
</ContextMenuBrushColor>
<ContextMenuDivider/>

@foreach (var brush in SelectableBrushes)
{
    var (color, displayName) = brush.TryPickT0(out var projectBrush, out _)
        ? (projectBrush.Color, projectBrush.DisplayName)
        : (ColorString.Transparent, "No brush");

    <ContextMenuOption OnClick="@(() => HandleSelectBrush(brush))">
        <div class="@TW(Flex, FlexRow, ItemsCenter, Gap(2))">
            <ColorDot Color="@color"/>

            <span class="@TW(FlexGrow)">
                        @displayName
                    </span>

            @if (brush.TryPickT0(out projectBrush, out _))
            {
                <Icon IconDescriptor="IconDescriptor.Edit"
                      OnClick="@(e => HandleEditBrush(e, projectBrush))"
                      StopPropagation="@true"/>
            }
        </div>
    </ContextMenuOption>
}

<ContextMenuDivider/>

<ContextMenuOption OnClick="HandleNewBrush">
    Add new brush
</ContextMenuOption>

@code {
    [Parameter] [EditorRequired] public Id<Project> ProjectId { get; set; }
    [Parameter] [EditorRequired] public TileIndex TileIndex { get; set; }
    [Parameter] [EditorRequired] public ProjectBrushOrAny ProjectBrushOrAny { get; set; } = ProjectBrushOrAny.Any;
    [Parameter] [EditorRequired] public Corner Corner { get; set; }

    private IReadOnlyList<ProjectBrushOrAny> _brushes = [ ];

    private IEnumerable<ProjectBrushOrAny> SelectableBrushes => _brushes.Where(x => !x.Equals(ProjectBrushOrAny));

    protected override async Task OnParametersSetAsync()
    {
        var request = new ListBrushesOperation.Request(ProjectId);
        var listBrushesResult = await ListBrushesOperation.ExecuteAsync(request);
        if (listBrushesResult.TryPickProblems(out var problems, out var brushes))
        {
            LoggingService.Show(problems);
            return;
        }

        _brushes = brushes
            .Brushes.Select(x => (ProjectBrushOrAny)x)
            .Append(ProjectBrushOrAny.Any)
            .ToArray();
    }

    private async Task HandleEditBrush(MouseEventArgs mouseEventArgs, ProjectBrush brush)
    {
        await ContextMenuService.HideAsync();
        await ModalService.ShowAsync(
            @<EditBrushModal ProjectId="@ProjectId" Brush="@brush"/>,
            "Edit Brush");
    }


    private async Task HandleSelectBrush(BrushIdOrAny brushId)
    {
        SetBrushForTileCornerOperation.Request request = new(ProjectId, TileIndex, Corner, brushId);
        var result = await SetBrushForTileCornerOperation.ExecuteAsync(request);
        if (result.TryPickProblems(out var problems))
        {
            LoggingService.Show(problems);
        }
    }

    private async Task HandleNewBrush()
    {
        CreateNewBrushOperation.Request request = new(ProjectId);
        var result = await CreateNewBrushOperation.ExecuteAsync(request);
        if (result.TryPickProblems(out var problems))
        {
            LoggingService.Show(problems);
        }
    }

}