@using Olve.Grids.Grids
@using Olve.Grids.Primitives
@inject ContextMenuService ContextMenuService
@inject LoggingService LoggingService
@inject GetBrushOperation GetBrushOperation

<div @onclick="HandleClick"
     @onclick:stopPropagation="@true"
     class="@TW(border, Bg(CurrentBrushId.IsT0 ? Color : ColorString.Transparent), W(Radius), H(Radius), RoundedFull) @Class">
</div>

@code {
    [Parameter] [EditorRequired] public Id<Project> ProjectId { get; set; }
    [Parameter] [EditorRequired] public required TileIndex TileIndex { get; set; }
    [Parameter] [EditorRequired] public required Corner Corner { get; set; }
    [Parameter] [EditorRequired] public required BrushIdOrAny CurrentBrushId { get; set; } = BrushIdOrAny.Any;
    [Parameter] [EditorRequired] public required string Radius { get; set; }
    [Parameter] public string? Class { get; set; }

    private ProjectBrushOrAny CurrentBrush { get; set; } = ProjectBrushOrAny.Any;

    protected override async Task OnParametersSetAsync()
    {
        if (!CurrentBrushId.TryPickT0(out var brushId, out _))
        {
            CurrentBrush = ProjectBrushOrAny.Any;
            return;
        }

        GetBrushOperation.Request request = new(ProjectId, brushId);
        var brushResult = await GetBrushOperation.ExecuteAsync(request);

        if (brushResult.TryPickProblems(out var problems, out var brush))
        {
            LoggingService.Show(problems);
            CurrentBrush = ProjectBrushOrAny.Any;
            return;
        }

        CurrentBrush = brush.Brush;
    }

    private ColorString Color => CurrentBrush.TryPickT0(out var brush, out _)
        ? brush.Color
        : ColorString.Transparent;

    private async Task HandleClick(MouseEventArgs e)
    {
        await ContextMenuService.ShowAsync(e,
            @<SelectBrushContextMenu ProjectId="@ProjectId"
                                     TileIndex="@TileIndex"
                                     Corner="@Corner"
                                     ProjectBrushOrAny="@CurrentBrush"/>);
    }


}
