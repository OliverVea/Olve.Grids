@page "/create-project"
@using UI.Core
@using UI.Core.Logging
@using UI.Core.Projects
@using UI.Core.Projects.Operations
@inject NavigationService NavigationService
@inject LoggingService LoggingService
@inject CreateNewProjectOperation CreateNewProjectOperation

<div class="@TW(Flex, FlexRow, Gap(2), ItemsCenter, JustifyCenter, MinHScreen, MinWScreen)">
    <div
        class="@TW(Flex, FlexCol, ItemsCenter, JustifyCenter, MinHScreen, MinW("320px"))">
        <TwoRowGrid Left="@Left" Right="@Right"/>

        <HorizontalDivider/>

        <div class="@TW(Flex, FlexRow, ItemsCenter, JustifyCenter, Gap(2), Text(Colors.Active.Text.Ordinary))">
            <Button OnClick="HandleBack">
                Back
            </Button>

            <Button OnClick="HandleCreate">
                Create
            </Button>
        </div>
    </div>

    <VerticalDivider/>

    <div class="@TW(Relative, W("30vw"), H("80vh"))">
        @if (TileSheetFile.HasValue)
        {
            <ImageWithGrid TileSize="@(TileSize)"
                           TileSheetFile="@TileSheetFile.Value"/>
        }
    </div>
</div>


@code {
    private const int DefaultTileLength = 32;
    private static readonly Size DefaultTileSize = new(DefaultTileLength, DefaultTileLength);

    private string ProjectName { get; set; } = string.Empty;
    private FileContent? TileSheetFile { get; set; }

    private Size TileSize { get; set; } = DefaultTileSize;

    private IEnumerable<RenderFragment> Left =>
    [
        @<span>Project Name:</span>,
        @<span>Tile Size:</span>,
        @<span>Tile Sheet:</span>,
    ];

    private IEnumerable<RenderFragment> Right =>
    [
        @<TextInputField @bind-Value="ProjectName" Placeholder="Project name"/>,
        @<SizeInputFields Size="TileSize" OnSizeChanged="OnTileSizeChanged"/>,
        @<FileInputField OnFileChanged="OnTileSheetFileChanged" Accept="image/png"/>,
    ];

    private void OnTileSizeChanged(Size newSize)
    {
        TileSize = newSize;
    }

    private void HandleBack()
    {
        var navigationTarget = new NavigationTargets.Home();
        NavigationService.NavigateTo(navigationTarget);
    }

    private void OnTileSheetFileChanged(FileContent tileSheetFile)
    {
        TileSheetFile = tileSheetFile;
    }

    private async Task HandleCreate()
    {
        var result = await CreateProjectAsync();
        if (result.TryPickProblems(out var problems, out var projectId))
        {
            LoggingService.Show(problems);
            return;
        }

        var navigationTarget = new NavigationTargets.ProjectDashboard(projectId);
        NavigationService.NavigateTo(navigationTarget);
    }

    private async Task<Result<Id<Project>>> CreateProjectAsync()
    {
        if (string.IsNullOrWhiteSpace(ProjectName))
        {
            return Result<Id<Project>>.Failure(new ResultProblem("Project name is required."));
        }

        if (!TileSheetFile.HasValue)
        {
            return Result<Id<Project>>.Failure(new ResultProblem("Tile sheet is required."));
        }

        CreateNewProjectOperation.Request request = new(ProjectName, TileSheetFile.Value, TileSize);

        var result = await CreateNewProjectOperation.ExecuteAsync(request);
        if (result.TryPickProblems(out var problems, out var newProjectResponse))
        {
            return Result<Id<Project>>.Failure(problems);
        }

        return newProjectResponse.ProjectSummary.ProjectId;
    }

}
