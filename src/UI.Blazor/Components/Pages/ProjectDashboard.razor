@page "/project/{projectId}"
@using UI.Blazor.Navigation
@using UI.Core.Projects.Operations
@using UI.Core.Projects.Repositories
@inject LoadProjectOperation LoadProjectOperation
@inject LoggingService Logger
@inject NavigationService NavigationService
@inject SetCurrentProjectOperation SetCurrentProjectOperation
@inject ICurrentProjectRepository CurrentProjectRepository

@if (_project is not { } project)
{
    <span>Loading...</span>
    return;
}

<ProjectDashboardRoot Project="@project"/>

@code {
    [Parameter] public required string ProjectId { get; set; }

    private Project? _project;

    protected override void OnInitialized()
    {
        CurrentProjectRepository.OnCurrentProjectChanged.Add(async _ => { await InvokeAsync(StateHasChanged); });
    }

    protected override async Task OnParametersSetAsync()
    {
        var projectResult = await LoadProjectAsync();
        if (projectResult.TryPickProblems(out var problems, out var project))
        {
            _project = null;
            Logger.Show(problems);

            var navigationTarget = new NavigationTargets.Home();
            NavigationService.NavigateTo(navigationTarget);
            return;
        }

        _project = project;
    }

    private async Task<Result<Project>> LoadProjectAsync()
    {
        var parsingResult = Id<Project>.TryParse(ProjectId, out var projectId);
        if (!parsingResult)
        {
            var problem = new ResultProblem("Invalid project id: '{0}'", ProjectId);
            return problem;
        }

        LoadProjectOperation.Request request = new(projectId);
        var result = await LoadProjectOperation.ExecuteAsync(request);

        if (result.TryPickProblems(out var problems, out var response))
        {
            return problems;
        }

        SetCurrentProjectOperation.Request setCurrentProjectRequest = new(response.Project);
        var setCurrentProjectResult = await SetCurrentProjectOperation.ExecuteAsync(setCurrentProjectRequest);
        if (setCurrentProjectResult.TryPickProblems(out problems))
        {
            return problems;
        }

        return response.Project;
    }

}