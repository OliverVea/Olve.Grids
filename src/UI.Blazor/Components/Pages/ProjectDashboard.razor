@using Olve.Grids.Grids
@using UI.Blazor.Components.ProjectDashboard
@using UI.Core
@using UI.Core.Logging
@using UI.Core.Projects
@using UI.Core.Tiles
@inject LoggingService LoggingService
@inject NavigationService NavigationService
@inject ProjectDashboardContainer ProjectDashboardContainer

<div class="@TW(Flex, FlexCol, WFull, HFull, Top(0))">
    <TitleBar Title="@Project.Name.Value" OnLeft="HandleBack" IconRight="@IconDescriptor.Plus" OnRight="HandleNext"/>

    <div class="@TW(Grow, WFull, OverflowYHidden, P(pct(2)), Pt(2))">
        <div class="@TW(Grid, GridCols($"repeat({Columns},auto)"), Gap(2))">
            @foreach (var tileInformation in GetTileInformation())
            {
                <Tile TileInformation="@tileInformation"/>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] [EditorRequired] public required Project Project { get; set; }

    private int Columns => Project.GridConfiguration.Columns;
    private IEnumerable<TileIndex> TileIndices => Project.GridConfiguration.GetTileIndices();

    private IEnumerable<TileInformation> GetTileInformation()
    {
        foreach (var tileIndex in TileIndices)
        {
            var result = TileInformationExtractionHelper.ExtractTileInformation(Project, tileIndex);
            if (result.TryPickProblems(out var problems, out var tileInformation))
            {
                LoggingService.Show(problems);
                continue;
            }

            yield return tileInformation;
        }
    }

    private void HandleBack()
    {
        var navigationTarget = new NavigationTargets.Home();
        NavigationService.NavigateTo(navigationTarget);
    }

    private void HandleNext()
    {
        var navigationTarget = new NavigationTargets.Generate(Project.Id);
        NavigationService.NavigateTo(navigationTarget);
    }

    protected override void OnInitialized() => ProjectDashboardContainer.SetProvider(this);

    public Task StateHasChangedAsync() => InvokeAsync(StateHasChanged);

}