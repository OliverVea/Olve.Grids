@page "/"
@inject ListProjectSummariesOperation ListProjectSummariesOperation
@inject DeleteProjectOperation DeleteProjectOperation
@inject LoggingService LoggingService
@inject NavigationManager NavigationManager

<div class="@TW(Flex, FlexRow, Gap(2), ItemsCenter, JustifyCenter, MinHScreen, MinWScreen)">
    <div
        class="@TW(Flex, FlexCol, ItemsCenter, JustifyCenter, W("460px"), Gap(6), Text(Colors.Active.Text.Most))">

        <!-- Title -->
        <Title>[GRIDS]</Title>

        <!-- Search Bar -->
        <SearchBar OnSearchPromptChange="HandleSearchPromptChange">
            <Button OnClick="NavigateToCreateNewProject">
                New Project
            </Button>
        </SearchBar>

        <!-- Project Overview -->
        <TwoRowGrid Left="@ProjectOverviewLeft" Right="@ProjectOverviewRight" LeftSize="auto"/>

        <!-- Pagination -->
        @if (TotalPages > 1)
        {
            <div class="@TW(Flex, FlexGrow, ItemsCenter, JustifyCenter, Gap(2), Text(Colors.Active.Text.Ordinary))">
                @if (HasPreviousPage)
                {
                    <Button OnClick="DecrementPage">
                        <Icon IconDescriptor="@IconDescriptor.ChevronLeft"/>
                    </Button>
                }

                <span>@(Page + 1) / @(TotalPages)</span>

                @if (HasNextPage)
                {
                    <Button OnClick="IncrementPage">
                        <Icon IconDescriptor="@IconDescriptor.ChevronRight"/>
                    </Button>
                }
            </div>
        }
    </div>
</div>

@code {
    private string SearchPrompt { get; set; } = string.Empty;

    private int Page { get; set; }
    private const int PageSize = 4;

    private Pagination Pagination => new(Page, PageSize);

    private ListProjectSummariesOperation.Response? Response { get; set; }
    private IEnumerable<ProjectSummary> ProjectSummaries => Response?.Projects ?? Enumerable.Empty<ProjectSummary>();

    protected override async Task OnInitializedAsync()
    {
        await LoadProjects();
    }

    private IEnumerable<RenderFragment> ProjectOverviewLeft => ProjectSummaries.Select(GetProjectOverviewLeft);

    private RenderFragment GetProjectOverviewLeft(ProjectSummary projectSummary) => __builder =>
    {
        <TimeAgo Then="@projectSummary.LastAccessed"/>
    };

    private IEnumerable<RenderFragment> ProjectOverviewRight => ProjectSummaries.Select(GetProjectOverviewRight);

    private RenderFragment GetProjectOverviewRight(ProjectSummary projectSummary) => __builder =>
    {
        <div class="@TW(Flex, FlexCol)">
            <div class="@TW(Flex, FlexRow, JustifyBetween)">
                <span @onclick="() => NavigateToProjectDashboard(projectSummary.ProjectId)"
                      class="@TW(Text(Colors.Active.Text.More),
                                 FlexGrow,
                                 Hover(Underline),
                                 CursorPointer,
                                 FontSemibold)">@projectSummary.Name.Value</span>
                <Icon @onclick="() => HandleDelete(projectSummary.ProjectId)"
                      Class="@TW(Hover(Text(Colors.Active.Text.Most)), CursorPointer)"
                      IconDescriptor="@IconDescriptor.Trash"/>
            </div>
            <span title="@projectSummary.Path.Value" class="@TW(FontLight, TextXs)">
                @(new FileInfo(projectSummary.Path.Value).Name)
            </span>
        </div>
    };

    private async Task LoadProjects()
    {
        Response = null;

        var request = new ListProjectSummariesOperation.Request(SearchPrompt, Pagination);
        var result = await ListProjectSummariesOperation.ExecuteAsync(request);
        if (result.TryPickValue(out var response, out var problems))
        {
            Response = response;
            StateHasChanged();
        }
        else
        {
            foreach (var problem in problems)
            {
                LoggingService.Show(problem);
            }
        }
    }

    private bool HasPreviousPage => Page > 0;
    private bool HasNextPage => Response?.Projects.HasNextPage ?? false;
    private int TotalPages => Response?.Projects.TotalPages ?? 0;

    private async Task IncrementPage()
    {
        if (!HasNextPage) return;

        Page++;
        await LoadProjects();
    }

    private async Task DecrementPage()
    {
        if (!HasPreviousPage) return;

        Page--;
        await LoadProjects();
    }

    private void NavigateToCreateNewProject() => NavigationManager.NavigateTo("create-project");
    private void NavigateToProjectDashboard(Id<Project> projectId) => NavigationManager.NavigateTo($"project/{projectId}");

    private async Task HandleSearchPromptChange(string s)
    {
        SearchPrompt = s;
        Page = 0;
        await LoadProjects();
    }

    private async Task HandleDelete(Id<Project> projectProjectId)
    {
        DeleteProjectOperation.Request request = new(projectProjectId);
        var result = await DeleteProjectOperation.ExecuteAsync(request);
        if (result.TryPickProblems(out var problems))
        {
            foreach (var problem in problems)
            {
                LoggingService.Show(problem);
            }
        }

        await LoadProjects();
    }

}
