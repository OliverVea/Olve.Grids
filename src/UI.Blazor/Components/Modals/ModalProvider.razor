@using UI.Core
@inject ModalService ModalService
@inject ElementSizeInterop ElementSizeInterop

@if (!Visible)
{
    return;
}

<div class="@TW(Fixed, Inset(0), Bg(ColorString.Black25), Flex, JustifyCenter, ItemsCenter)" @onclick="Hide">
    @ChildContent
</div>

@code {
    public bool Visible => _state.Visible;
    private RenderFragment ChildContent => _state.ChildContent;

    private ModalState _state = new();

    protected override void OnInitialized()
    {
        ModalService.Register(this);
    }

    public async ValueTask MutateAsync(Action<ModalState> mutator)
    {
        await InvokeAsync(() => Mutate(mutator));
    }

    private void Mutate(Action<ModalState> mutator)
    {
        mutator(_state);
        StateHasChanged();
    }

    private void Hide()
    {
        Console.WriteLine("Hide");
        Mutate(s => s.Visible = false);
    }

    public record ModalState
    {
        public string? Title { get; set; }
        public bool Visible { get; set; }
        public RenderFragment ChildContent { get; set; } = _ => { };
    }

    private Task Confirm()
    {
        Console.WriteLine("Confirm");
        Hide();
        return Task.CompletedTask;
    }

}