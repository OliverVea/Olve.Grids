@using UI.Core
<button
    class="@AllClasses"
    disabled="@Disabled"
    @onclick="OnClick">
    @ChildContent
</button>


@code {
    [Parameter] public EventCallback OnClick { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; } = _ => { };
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public string? Class { get; set; }

    private string AllClasses => Class is null ? TW(GetTailwindClasses()) : string.Join(" ", TW(GetTailwindClasses()), Class);

    private IEnumerable<TailwindClass> GetTailwindClasses()
    {
        if (Disabled)
        {
            yield return CursorDefault;
            yield return Bg(Colors.Active.Panels.Ordinary);
            yield return Text(Colors.Active.Text.More);
        }
        else
        {
            yield return CursorPointer;
            yield return Bg(Colors.Active.Panels.More);
            yield return Text(Colors.Active.Text.Most);
            yield return Hover(Bg(Colors.Active.Panels.Most));
        }

        yield return BorderNone;
        yield return Py(2);
        yield return Px(4);
        yield return RoundedMd;
        yield return Transition;
        yield return Duration("75");
        yield return TextNoWrap;
    }

}