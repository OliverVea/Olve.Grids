<InputField
    TValue="int"
    Value="Value"
    ValueChanged="SetValue"
    WheelChanged="OnWheelChanged"
    InputType="number"
    Placeholder="@Placeholder"
    IconDescriptor="@IconDescriptor"
    AlignRight="@AlignRight"
    Style="@($"width: {Width}")"
    Immediate="@Immediate"/>

@code {
    [Parameter] public int Value { get; set; }
    [Parameter] public string Placeholder { get; set; } = string.Empty;
    [Parameter] public bool Immediate { get; set; }
    [Parameter] public EventCallback<int> ValueChanged { get; set; }
    [Parameter] public IconDescriptor? IconDescriptor { get; set; }
    [Parameter] public bool AlignRight { get; set; }

    [Parameter] public int Min { get; set; } = int.MinValue;
    [Parameter] public int Max { get; set; } = int.MaxValue;

    [Parameter] public bool FitContent { get; set; }
    private string Width { get; set; } = string.Empty;

    protected override void OnParametersSet()
    {
        if (FitContent)
        {
            Width = $"{Value.ToString().Length + 1}ch";
        }
    }

    private Task SetValue(int value)
    {
        if (value < Min) value = Min;
        if (value > Max) value = Max;

        if (Value == value) return Task.CompletedTask;

        if (FitContent)
        {
            Width = $"{value.ToString().Length + 1}ch";
        }

        Value = value;
        return ValueChanged.InvokeAsync(value);
    }

    private void OnWheelChanged(WheelChange change)
    {
        if (change.Direction == WheelDirection.Up)
        {
            SetValue(Value + 1);
        }
        else if (change.Direction == WheelDirection.Down)
        {
            SetValue(Value - 1);
        }
    }

}