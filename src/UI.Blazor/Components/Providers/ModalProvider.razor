@inject ModalService ModalService

@if (!Visible)
{
    return;
}

<div class="@TW(Fixed, Inset(0), Opacity(25), Bg(ColorString.Black))">

</div>


<div class="@TW(Fixed, Inset(0), Flex, JustifyCenter, ItemsCenter)">
    <div class="@TW(Flex, FlexCol, MinW(px(400)), MinH(px(600)), Bg(Colors.Active.Panels.Ordinary))">
        <TitleBar Title="@Title" OnLeft="Hide" IconRight="IconDescriptor.Check" OnRight="Confirm" RightDisabled="true"/>
        <div class="@TW(FlexGrow, WFull)">
            @ChildContent
        </div>
    </div>
</div>



@code {
    public string? Title => _state.Title;
    public bool Visible => _state.Visible;
    private RenderFragment ChildContent => _state.ChildContent;

    private ModalState _state = new();

    protected override void OnInitialized()
    {
        ModalService.Register(this);
    }

    public async ValueTask MutateAsync(Action<ModalState> mutator)
    {
        await InvokeAsync(() => Mutate(mutator));
    }

    private void Mutate(Action<ModalState> mutator)
    {
        mutator(_state);
        StateHasChanged();
    }

    private void Hide() => Mutate(s => s.Visible = false);

    public record ModalState
    {
        public string? Title { get; set; }
        public bool Visible { get; set; }
        public RenderFragment ChildContent { get; set; } = _ => { };
    }

    private Task Confirm()
    {
        Console.WriteLine("Confirm");
        Hide();
        return Task.CompletedTask;
    }

}