@using Olve.Grids.Primitives
@using UI.Core.Services.Tiles
@inject ContextMenuService ContextMenuService
@inject DeactivateTileOperation DeactivateTileOperation
@inject LoggingService LoggingService

<TileBase Image="@TileInformation.Image"
          Classes="@TW(Relative,
                       WFull,
                       ShadowXl,
                       TransitionTransform,
                       Transform,
                       border,
                       Border(ColorString.White),
                       BorderOpacity(15),
                       Hover(BorderOpacity(100), Scale(110), Z(10)))"
          OnClick="HandleClick"
>

    @foreach (var (corner, top, left) in GetCorners())
    {
        var thisCorner = corner;
        <Dot TileIndex="@TileInformation.TileIndex"
             Corner="@thisCorner"
             CurrentBrushId="@CornerBrushes[corner]"
             Class="@TW(Absolute,
                        Top(pct(top)),
                        Left(pct(left)),
                        Opacity(50),
                        Hover(Opacity(100), Scale(125)),
                        Z(15))"
             Radius="10%"/>
    }
</TileBase>


@code {

    private static readonly HsvNormal HsvNormal = new(
        new NormalParameters(0.6f, 0.25f),
        new NormalParameters(0.5f, 0.05f));

    private ColorString GetBrushColorString(BrushId brushId) => CachedColorHelper.GetColorStringFromInteger(brushId.Id.GetHashCode(), HsvNormal);

    [Parameter] [EditorRequired] public required TileInformation TileInformation { get; set; }

    private CornerBrushes CornerBrushes => TileInformation.CornerBrushes;

    private const float DotRadius = 15f;
    private const float Small = 15f;
    private const float Large = 85f - DotRadius;

    private IEnumerable<(Corner, float Top, float Left)> GetCorners()
    {
        yield return (Corner.UpperLeft, Small, Small);
        yield return (Corner.UpperRight, Small, Large);
        yield return (Corner.LowerLeft, Large, Small);
        yield return (Corner.LowerRight, Large, Large);
    }

    private async Task HandleClick(MouseEventArgs e)
    {
        await ContextMenuService.ShowAsync(e, ContextMenuContent, $"Tile {TileInformation.TileIndex.Index}");
    }

    private RenderFragment ContextMenuContent => __builder =>
    {
        <ContextMenuItem OnClick="DeactivateTile" Class="@TW(Text(Colors.Active.Text.Danger))">
            Deactivate
        </ContextMenuItem>
    };

    private async Task DeactivateTile()
    {
        var request = new DeactivateTileOperation.Request(TileInformation.TileIndex);
        var result = await DeactivateTileOperation.ExecuteAsync(request);

        if (result.TryPickProblems(out var problems))
        {
            LoggingService.Show(problems);
        }
    }

}



