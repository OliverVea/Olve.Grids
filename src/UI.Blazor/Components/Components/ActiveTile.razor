@using Olve.Grids.Primitives
@using UI.Core.Services.Tiles
@using UI.Blazor.Components.Adjacency
@inject ContextMenuService ContextMenuService
@inject DeactivateTileOperation DeactivateTileOperation
@inject LoggingService LoggingService

<TileBase Image="@TileInformation.Image"
          Classes="@TW(Relative,
                       WFull,
                       ShadowXl,
                       TransitionTransform,
                       Transform,
                       border,
                       Border(ColorString.White),
                       BorderOpacity(15),
                       Hover(BorderOpacity(100), Scale(110), Z(10)))"
          OnClick="HandleClick">
    @foreach (var (direction, top, left) in GetDirections())
    {
        <div class="@TW(Absolute,
                        Top(pct(top)),
                        Left(pct(left)),
                        W(20),
                        H(20),
                        Z(10))">
            <AdjacencyArrow Direction="@direction"/>

        </div>
    }

    @foreach (var (corner, top, left) in GetCorners())
    {
        var thisCorner = corner;
        var brushId = CornerBrushes[corner];

        <Dot TileIndex="@TileInformation.TileIndex"
             Corner="@thisCorner"
             CurrentBrushId="@brushId"
             Class="@TW(Absolute,
                        Top(pct(top)),
                        Left(pct(left)),
                        Hover(Scale(125)),
                        TransitionTransform,
                        Z(15))"
             Radius="10%"/>
    }
</TileBase>


@code {
    [Parameter] [EditorRequired] public required TileInformation TileInformation { get; set; }

    private CornerBrushes CornerBrushes => TileInformation.CornerBrushes;

    private const float DotRadius = 15f;
    private const float Small = 15f;
    private const float Middle = 50f - DotRadius;
    private const float Large = 85f - DotRadius;

    private IEnumerable<(Corner, float Top, float Left)> GetCorners()
    {
        yield return (Corner.UpperLeft, Small, Small);
        yield return (Corner.UpperRight, Small, Large);
        yield return (Corner.LowerLeft, Large, Small);
        yield return (Corner.LowerRight, Large, Large);
    }

    private IEnumerable<(Direction, float Top, float Left)> GetDirections()
    {
        yield return (Direction.Up, Small, Middle);
        yield return (Direction.Left, Middle, Small);
        yield return (Direction.Right, Middle, Large);
        yield return (Direction.Down, Large, Middle);
    }

    private async Task HandleClick(MouseEventArgs e)
    {
        await ContextMenuService.ShowAsync(e, ContextMenuContent, $"Tile {TileInformation.TileIndex.Index}");
    }

    private RenderFragment ContextMenuContent => __builder =>
    {
        <ContextMenuItem OnClick="DeactivateTile" Class="@TW(Text(Colors.Active.Text.Danger))">
            Deactivate
        </ContextMenuItem>
    };

    private async Task DeactivateTile()
    {
        var request = new DeactivateTileOperation.Request(TileInformation.TileIndex);
        var result = await DeactivateTileOperation.ExecuteAsync(request);

        if (result.TryPickProblems(out var problems))
        {
            LoggingService.Show(problems);
        }
    }

}



